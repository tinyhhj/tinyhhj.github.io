{"componentChunkName":"component---src-templates-blog-post-js","path":"/books/cleancode/3장/","result":{"data":{"site":{"siteMetadata":{"title":"tinyhhj Blog"}},"markdownRemark":{"id":"93f4a6f2-9491-5c8f-a6f0-aecc49e4092a","excerpt":"…","html":"<h2>3장 함수</h2>\n<p><strong>함수형 프로그래밍</strong>이 존재할 정도로 함수의 존재는 중요한 요소이다. 함수를 기본단위로 여러 함수를 조합하여 서비스를 만드는 모습은 정말 인상적이었다.<br>\n내가 우연하게 접했던, 작은 프로그램은 시간을 표시해주는 컴포넌트였던거 같다. 아주 단순한 작업들을 함수로 명명한 뒤, 레고 블럭을 조립해서 로봇을 만드는 인상을 받았다.</p>\n<p>이 장에서도 살짝 언급이 되지만, 함수 자체를 to라는 prefix를 붙여서 서술할 수 있을정도로 작게 나눠서 추상화단계가 함수 내에서는 일정해야한다고 한다.<br>\n추상화라는게 나에게는 정말 이해하기 힘든 개념이지만, 엄청 단순화해서 이해하기로는 흔히 말하는 low-level(하드웨어와 가까운 코드), high-level(어플리케이션과 가까운 코드)처럼<br>\n함수가 하는 작업이 많은 것을 내포하느냐, 단순한 한가지를 하느냐인것 같다. 그래서 저자도 함수의 추상화는 점점 내려가는 방향으로 짜야한다고 하는데, 어렴풋이 이해가 될뿐이다.</p>\n<p>아래는 내가 이해한 바로 적은 요약본이다.</p>\n<ol>\n<li>\n<p>함수는 한가지만 하고, 작아야하며, 추상화수준이 동일해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function printLog(message) {\n    logError(message);\n    logInfo(message);\n    logTrace(message);\n}</code></pre></div>\n</li>\n<li>\n<p>함수의 인수는 갯수가 작아야한다.: 이해하기도 힘들뿐더러, 테스트 케이스의 갯수도 늘어난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function isExist(fileName) {\n    // search file\n    return true; // or false\n}\nfunction Point(x,y) {\n    this.x = x;\n    this.y = y;\n}</code></pre></div>\n</li>\n<li>switch문을 주의해서 사용해야한다.: 한가지 일만한다는 규칙을 어기며(SRP), switch문의 조건이 늘어난다면 수정사항이 발생하기 때문에, 확장성에 좋지 않다(OCP)</li>\n<li>서술적인 이름을 사용해라.: 이름이 조금 길다고해도 명확히 표현해주는 함수가 더 읽기도 쉽고, 이해하기도 편한법</li>\n<li>부수효과(side effect)를 주의해야한다.: 혼자만 작성하는 코드의 경우에는 관계?가 적겠지만, 여러명이서 짜는 코드의 경우에 부수효과로 인해, 디버깅이 어려워 지고, 시간소비가 커질수 있다. 왠만하면 순수함수를 애용하자.</li>\n<li>오류코드대신 예외를 사용해라: 로직을 try/catch 구문으로 감싼 함수로 추출한다면, 순수로직과 에러처리가 분리될 수 있다.</li>\n</ol>\n<p>결국에는 마지막 핵심은 위 내용들을 잘 지키면서, 한번에 잘짜기는 불가능에 가까우니 꾸준히 <strong>리팩토링</strong>을 하자로 받아들여진다.</p>\n<div class=\"clock\"></div>\n<script>\nconst clock = document.querySelector('.clock');\nconst now = ()=>new Date();\nconst appendZero =(number)=> {return number < 10 ? `0`+number : number};\nconst  getHours = (date)=>date.getHours();\nconst  getMinutes = (date)=>appendZero(date.getMinutes());\nconst getSeconds = (date)=>appendZero(date.getSeconds());\nconst toDate = (date)=>{\n    return `${getHours(date)}:${getMinutes(date)}:${getSeconds(date)}`;\n};\nconst printTime = (time)=>clock.innerText = time;\nconst tick = ()=>[now, toDate, printTime].reduce((a,b)=>{return b(a)},{});\nsetInterval(tick,1000);\n</script>\n## Reference\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/11681152\">CleanCode</a></li>\n</ul>","frontmatter":{"title":"[cleancode]3장 함수","date":"April 20, 2021","description":"cleancode"}},"previous":{"fields":{"slug":"/fe/stacking-context/"},"frontmatter":{"title":"[css]stacking-context"}},"next":null},"pageContext":{"id":"93f4a6f2-9491-5c8f-a6f0-aecc49e4092a","previousPostId":"ca22e2e9-01f4-5f4b-aa29-7b982e7a26ac","nextPostId":null}},"staticQueryHashes":["2841359383"]}