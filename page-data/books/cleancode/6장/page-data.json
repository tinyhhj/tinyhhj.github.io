{"componentChunkName":"component---src-templates-blog-post-js","path":"/books/cleancode/6장/","result":{"data":{"site":{"siteMetadata":{"title":"tinyhhj Blog"}},"markdownRemark":{"id":"7eb63ab0-af11-52f0-b34d-2609506c2052","excerpt":"객체와 자료구조 객체는 동작을 공개하고, 자료를 숨긴다.  자료구조는 동작없이 자료를 공개한다.  이 장은 아주 짧지만 대단히 중요한 내용을 다루는 듯 싶다. 여태까지는 와 를 구분해서 생각해본적이 따로 없었다. 왜냐하면 모두 객체라고 생각했기 때문이다. 하지만…","html":"<h2>객체와 자료구조</h2>\n<ol>\n<li>객체는 동작을 공개하고, 자료를 숨긴다. </li>\n<li>자료구조는 동작없이 자료를 공개한다. </li>\n</ol>\n<p>이 장은 아주 짧지만 대단히 중요한 내용을 다루는 듯 싶다. 여태까지는 <code class=\"language-text\">자료구조</code>와 <code class=\"language-text\">객체</code>를 구분해서 생각해본적이 따로 없었다. 왜냐하면 모두 객체라고 생각했기 때문이다.</p>\n<p>하지만 6장을 읽으면서, 아주 미묘한 차이에 대해서 느낄 수 있었고, 그 작은 느낌을 까먹지 않도록 기록으로 남겨두고자 글로 적는다.</p>\n<p>객체는 자료를 숨김으로써 추상화된다. <em>추상화</em>는 내게 있어 애매모호 그 자체이다. 애매모호하다는 단어가 풍기는 이미지 자체가 흐릿하듯이, 실체가 없다는 의미로 내게 있어서 해석된다. 즉, 다형성과도 유사한 관계가 있는 것 같다.</p>\n<p>예를 들면 아래의 예시를 통해 객체를 살펴본다면,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Playable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Playable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Playable은 인터페이스로써, 상태가 없는 오직 동작만 존재하는 객체를 나타낸다. 이 Playable한 객체는 play라는 동작만 수행할 수 있다면 어느것이든 될 수 있다. 게임이던, mp3던, 악기던 실체가 무엇인지 중요하지 않다.</p>\n<p>Game역시 인터페이스와 유사하지만 abstract class로써, play가 가능한 여러 객체중에 title명을 가지는 게임으로 범위를 제한한다. 게임명과, play기능이 탑재되어있다면 어떤 게임이던 관계가 없다.</p>\n<p>객체는 자료를 숨기고, 메소드를 공개함으로써 공통된 새로운 기능이 필요할 때, 각 객체를 모두 수정해야한다는 번거로움이 있다. 반면 새로운 객체를 추가할 때, 의존성의 변화없이 손쉽게 추가할 수 있는 장점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Marketer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> payInHour<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> workHoursInDay<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> optionalIncentive<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Engineer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> payInHour<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> workHoursInDay<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> overTimePayInHour<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> overTimeInDay<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sales</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> payInHour<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> workHoursInDay<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> numberOfContracts<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> additionalIncentive<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentSystem</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">calculatePay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> job<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> job <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Sales</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Sales</span> salesMan <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Sales</span><span class=\"token punctuation\">)</span> job<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> payInHour <span class=\"token operator\">*</span> workHoursInday <span class=\"token operator\">+</span> numberOfContracts <span class=\"token operator\">*</span> additionalIncentive<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 자료구조는 명확한 실체를 자료를 공개함으로써 나타낸다. 실체를 드러내고 동작하는 방식은 별도로 구현되어, 새로운 메소드를 추가하는데 어려움이 없다.반면에 새로운 자료구조가 추가된다면, 기존의 동작방식에 변화가 생겨 모든 메소드를 수정해야하는 번거로움이 발생한다.</p>\n<blockquote>\n<p>이 부분은 명확하게 이해가 필요한 부분이므로, 두고두고 고민해야할 듯 싶다.</p>\n</blockquote>\n<p>결론은 어느 자료구조를 이용하는 절차지향 방법이 좋다, 객체를 이용하는 객체지향 방법이 좋다가 아닌, 다양한 방법들을 깊게 이해하고, 상황에 적절한 해법을 제시할 수 있도록 열린마음으로 배우려는 자세를 유지하는게 좋은것 같다.</p>\n<h2>Reference</h2>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/11681152\">CleanCode</a></li>\n</ul>","frontmatter":{"title":"[cleancode]6장 객체와 자료구조","date":"May 01, 2021","description":"cleancode"}},"previous":{"fields":{"slug":"/books/cleancode/3장/"},"frontmatter":{"title":"[cleancode]3장 함수"}},"next":{"fields":{"slug":"/algo/coding-game/"},"frontmatter":{"title":"coding-game"}}},"pageContext":{"id":"7eb63ab0-af11-52f0-b34d-2609506c2052","previousPostId":"93f4a6f2-9491-5c8f-a6f0-aecc49e4092a","nextPostId":"ee531632-8a74-5a34-83bf-7e77fa5e91d7"}},"staticQueryHashes":["2841359383"]}