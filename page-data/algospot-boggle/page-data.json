{"componentChunkName":"component---src-templates-blog-post-js","path":"/algospot-boggle/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"35157f40-1444-5f31-949b-b30988d9fbf3","excerpt":"BOGGLE 재귀호출","html":"<h1><a href=\"https://algospot.com/judge/problem/read/BOGGLE\">BOGGLE</a></h1>\n<h2>재귀호출</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package algospot.boggle;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\npublic class Main {\n    static char[][] arr;\n    static int[][] directions = {\n            {-1,-1},\n            {-1,0},\n            {-1,1},\n            {0,-1},\n            {0,1},\n            {1,-1},\n            {1,0},\n            {1,1}\n    };\n    static int[][][] cache ;\n    public static void main(String[] args) throws IOException {\n\n//        BufferedReader br = new BufferedReader((new InputStreamReader(new FileInputStream(&quot;algospot/boggle/test.txt&quot;))));\n        BufferedReader br = new BufferedReader((new InputStreamReader(System.in)));\n        int tc = Integer.valueOf(br.readLine());\n        for( int i = 0 ; i &lt; tc ; i++) {\n            arr = new char[5][5];\n            arr[0] = br.readLine().toCharArray();\n            arr[1] = br.readLine().toCharArray();\n            arr[2] = br.readLine().toCharArray();\n            arr[3] = br.readLine().toCharArray();\n            arr[4] = br.readLine().toCharArray();\n\n\n            int wordNum = Integer.valueOf(br.readLine());\n\n            for( int j = 0 ; j &lt; wordNum ; j++) {\n                cache = new int[5][5][10];\n                String word = br.readLine();\n                if( findWord(word)) {\n                    System.out.println(String.format(&quot;%s %s&quot;,word,&quot;YES&quot;));\n                } else {\n                    System.out.println(String.format(&quot;%s %s&quot;,word,&quot;NO&quot;));\n                }\n            }\n        }\n\n    }\n\n    public static boolean findWord(String word) {\n        return IntStream\n                .range(0,25)\n                .anyMatch(i-&gt;{\n                    int y = i / 5;\n                    int x = i % 5;\n                    return findWord(y,x,word.toCharArray());\n                });\n    }\n\n    public static boolean findWord(int y, int x , char[] word) {\n        if( cache[y][x][word.length-1] == 1) {\n            return true;\n        } else if( cache[y][x][word.length-1] == -1) {\n            return false;\n        }\n        if(word.length == 1 ) {\n            return word[0] == arr[y][x];\n        }\n\n        if( word[0] == arr[y][x]) {\n            boolean res = Stream.of(directions)\n                    .anyMatch(i-&gt;{\n                        int yy = y + i[0];\n                        int xx = x + i[1];\n                        if( yy &gt;= 0 &amp;&amp; yy &lt; 5 &amp;&amp; xx &gt;=0 &amp;&amp; xx &lt; 5) return findWord(yy,xx,new String(word).substring(1).toCharArray());\n                        return false;\n                    });\n            if(res) cache[y][x][word.length-1]= 1;\n            else cache[y][x][word.length-1] = -1;\n            return res;\n        }\n\n        return false;\n    }\n}</code></pre></div>","frontmatter":{"title":"[algospot]boggle","date":"December 31, 2019","description":"algorithm"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algospot-boggle/","previous":{"fields":{"slug":"/boj-1074/"},"frontmatter":{"title":"[boj]1074"}},"next":{"fields":{"slug":"/boj-1914/"},"frontmatter":{"title":"[boj]1914"}}}}}