{"componentChunkName":"component---src-templates-blog-post-js","path":"/algo/coding-game/","result":{"data":{"site":{"siteMetadata":{"title":"tinyhhj Blog"}},"markdownRemark":{"id":"ee531632-8a74-5a34-83bf-7e77fa5e91d7","excerpt":"CodingGame 코딩게임 Spring Challenge를 우연히 접하고 참가해보았다. 기존의 한가지 문제만을 해결하는 단순 문제와는 다르게 복합적인 문제를 해결하는 문제로 더 어렵게 느껴졌다.  코딩게임은 주어진 api…","html":"<h2>CodingGame</h2>\n<p>코딩게임 Spring Challenge를 우연히 접하고 참가해보았다.<br>\n기존의 한가지 문제만을 해결하는 단순 문제와는 다르게 복합적인 문제를 해결하는 문제로 더 어렵게 느껴졌다.<br>\n<br>\n코딩게임은 주어진 api를 이용해서, 게임 로직을 구현한뒤 다른사람이 작성한 봇과 승부해 랭킹을 가리는 형식인데,<br>\n<br>\n아무래도 기존 문제와는 다르게, 그래픽도 있고, 다른사람과 순위로 경쟁을 한다는 점에서 더 열중하게되고, 재밌었다.<br>\n<br>\n처음에 제공되는 <code class=\"language-text\">스타터 킷</code>을 이용해서 코드를 작성하였는데, 이번 경기를 참가하면서, 게임 내 자료구조가 고정되 있다는 점에서, 절차지향적 프로그래밍이 훨씬 편하다고 느껴졌다.<br>\n<br>\n게임 내 공통적으로 사용하게 되는 자료는 Cell과 Tree이었고, 이 두 자료구조를 잘 조합해 메소드를 만드는 방식으로 진행했었고,최대한 에러가 발생하지 않도록, 검증로직을 꼼꼼하게 체크해줬다.<br>\n<br>\n문제의 경우 해법이 명확하게 보이지 않아서, 각 Action별로 카테고리를 나눠, 카테고리 별 우선순위를 정해 명령을 수행하는 방식으로 진행했다.<br>\n<br>\n턴마다 가능한 액션들을 카테고리별로 모으고, 이 중 원하는 액션들을 한차례 필터링해준다(ex: SEED의 경우 origin 위치에서 2만큼 떨어진 곳). 필터링 결과를 특정 조건에 맞춰 정렬한 뒤, 가장 우선순위가 높은 액션을 수행하는 식으로 구성했다.<br>\n<br>\n의도하지는 않았지만, 액션의 가능유무를 체크하는 isValidAction 부분과, 필터링된 액션들의 정렬을 결정하는 calculateValue, 액션을 최종 선택하는 nextAction으로 크게 책임을 분리해놓으니, 문제가 생겼을 때 변경점이 분리되는 장점을 느낄 수 있었다.<br>\n<br>\n비록 골드리그 200-300위 정도에 그쳤지만, 앞으로 꾸준히 참가해서 복합적인 사고능력을 늘려야겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> math\n<span class=\"token keyword\">from</span> enum <span class=\"token keyword\">import</span> Enum\n<span class=\"token keyword\">import</span> random\n\n<span class=\"token comment\"># 24 day</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cell</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span>richness<span class=\"token punctuation\">,</span>neighbors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>richness <span class=\"token operator\">=</span> richness\n        self<span class=\"token punctuation\">.</span>neighbors <span class=\"token operator\">=</span> neighbors\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>richness<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isUsable</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>richness <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">,</span>is_mine<span class=\"token punctuation\">,</span>is_dormant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>idx <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size\n        self<span class=\"token punctuation\">.</span>is_mine <span class=\"token operator\">=</span> is_mine\n        self<span class=\"token punctuation\">.</span>is_dormant <span class=\"token operator\">=</span> is_dormant\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isTree</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isDormant</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>is_dormant\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>is_dormant\n    \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionType</span><span class=\"token punctuation\">(</span>Enum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    WAIT <span class=\"token operator\">=</span> <span class=\"token string\">'WAIT'</span>\n    SEED <span class=\"token operator\">=</span> <span class=\"token string\">'SEED'</span>\n    GROW <span class=\"token operator\">=</span> <span class=\"token string\">'GROW'</span>\n    COMPLETE <span class=\"token operator\">=</span> <span class=\"token string\">'COMPLETE'</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">:</span>\n    GROW_COSTS<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n    MAX_COST <span class=\"token operator\">=</span> <span class=\"token number\">9999</span>\n    MAX_TREE_CNT <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 까지 가능</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> target_idx <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> origin_idx<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">type</span>\n        self<span class=\"token punctuation\">.</span>target_idx <span class=\"token operator\">=</span> target_idx\n        self<span class=\"token punctuation\">.</span>origin_idx <span class=\"token operator\">=</span> origin_idx\n        self<span class=\"token punctuation\">.</span>cost<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'WAIT'</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>SEED<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'SEED </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>origin_idx<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n        \n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>action_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        split <span class=\"token operator\">=</span> action_string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>SEED<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>SEED<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>GROW<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>GROW<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">caculateSunPower</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>SEED<span class=\"token punctuation\">:</span>\n            cost <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> cost <span class=\"token keyword\">if</span> cost <span class=\"token operator\">&lt;</span> Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> Action<span class=\"token punctuation\">.</span>MAX_COST\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>GROW<span class=\"token punctuation\">:</span>\n            tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span>\n            ownCost <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">.</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            growCost <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">.</span>GROW_COSTS<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">.</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">&lt;</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">.</span>MAX_COST <span class=\"token keyword\">if</span> ownCost <span class=\"token operator\">>=</span> Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT<span class=\"token punctuation\">[</span>tree<span class=\"token punctuation\">.</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> ownCost <span class=\"token operator\">+</span> growCost\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> <span class=\"token number\">22</span> <span class=\"token keyword\">and</span> tree <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token keyword\">and</span> ownCost <span class=\"token operator\">+</span> growCost <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> Util<span class=\"token punctuation\">.</span>getExpectPoint<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>tree<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span>  ownCost <span class=\"token operator\">+</span> growCost <span class=\"token operator\">+</span> <span class=\"token number\">4</span>\n                <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">.</span>MAX_COST\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">:</span>\n            completeTrees <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            childTrees <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># print(f'complete {completeTrees} {Action.MAX_TREE_CNT[3]} {childTrees} {game.harvest}',file=sys.stderr,flush=True)</span>\n            <span class=\"token keyword\">if</span> completeTrees <span class=\"token operator\">>=</span> Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">4</span>\n            <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">.</span>MAX_COST\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isValidAction</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>cost <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cost\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>cost <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cost\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>SEED<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>origin_idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n                tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>origin_idx<span class=\"token punctuation\">)</span>\n                cell <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">]</span>\n                targetTree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span>\n                effectIdxes <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> tidx <span class=\"token keyword\">in</span> game<span class=\"token punctuation\">.</span>getTreeIdxes<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">for</span> effectIdx <span class=\"token keyword\">in</span> Util<span class=\"token punctuation\">.</span>getEffectIdxes<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>tidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        effectIdxes<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>effectIdx<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\"># print('Debug message..',self.type.name,self.origin_idx,self.target_idx,tree,targetTree,file=sys.stderr,flush=True)</span>\n                <span class=\"token keyword\">if</span> tree <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> cell<span class=\"token punctuation\">.</span>isUsable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> targetTree<span class=\"token punctuation\">:</span>\n                    cost <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>caculateSunPower<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> game<span class=\"token punctuation\">.</span>my_sun <span class=\"token operator\">>=</span> cost <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>target_idx <span class=\"token keyword\">in</span> effectIdxes<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>cost <span class=\"token operator\">=</span> cost\n                        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cost\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>GROW<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n                tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> tree <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    cost <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>caculateSunPower<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> game<span class=\"token punctuation\">.</span>my_sun <span class=\"token operator\">>=</span> cost<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>cost <span class=\"token operator\">=</span> cost\n                        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cost\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n                tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> tree <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    cost <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>caculateSunPower<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> game<span class=\"token punctuation\">.</span>my_sun <span class=\"token operator\">>=</span> cost<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>cost <span class=\"token operator\">=</span> cost\n                        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cost\n        self<span class=\"token punctuation\">.</span>cost <span class=\"token operator\">=</span> Action<span class=\"token punctuation\">.</span>MAX_COST\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cost\n        \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Util</span><span class=\"token punctuation\">:</span>\n    countW <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">,</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    richnessW <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>countW\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isValidIndex</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> idx <span class=\"token operator\">&lt;=</span> <span class=\"token number\">37</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">calculateValue</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> action<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>SEED<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 주변에 많을수록 좋다, richness가 높을수록 좋다</span>\n            <span class=\"token comment\"># -3-2-1 321</span>\n            opTreesIdxes <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeIdxes<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>getOpTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seed'</span><span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>origin_idx<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>Util<span class=\"token punctuation\">.</span>countW <span class=\"token operator\">*</span> <span class=\"token operator\">-</span>Util<span class=\"token punctuation\">.</span>getOpTreeCount<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span> Util<span class=\"token punctuation\">.</span>richnessW <span class=\"token operator\">*</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>richness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">&lt;</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>Util<span class=\"token punctuation\">.</span>getMyTreeCount<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>richness<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>richness<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>Util<span class=\"token punctuation\">.</span>getMyTreeCount<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> action<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>GROW<span class=\"token punctuation\">:</span>\n            tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getMyTreeByIdx<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'grow'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>tree<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>Util<span class=\"token punctuation\">.</span>getOpTreeCount<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>isValidAction<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>tree<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>Util<span class=\"token punctuation\">.</span>getOpTreeCount<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>isValidAction<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> action<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># tree = game.getTreeByIdx(action.target_idx)</span>\n            urgent<span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span>getOpTreeCount<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'complete'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>urgent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>target_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>richness<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>urgent<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getPositionsWithConditionTrue</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">,</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">]</span>\n        q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n            idx<span class=\"token punctuation\">,</span>dis <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> nidx <span class=\"token keyword\">in</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">,</span>dis<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> nidx <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n                    visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n                    res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">)</span>\n                    q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">,</span>dis<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n    \n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getOpTreeCount</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        srcTree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span>\n        cur <span class=\"token operator\">=</span> st\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        urgent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> dirs <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                cur <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">[</span>dirs<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> tree <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> tree<span class=\"token punctuation\">.</span>is_mine<span class=\"token punctuation\">:</span>\n                    res <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">if</span> srcTree <span class=\"token keyword\">and</span> srcTree<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> tree<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n                        urgent <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            cur <span class=\"token operator\">=</span> st\n        <span class=\"token comment\"># print('op cnt',st,urgent,res,file=sys.stderr,flush=True)</span>\n        <span class=\"token keyword\">return</span> urgent<span class=\"token punctuation\">,</span>res\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getMyTreeCount</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        srcTree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span>\n        cur <span class=\"token operator\">=</span> st\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        urgent <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> dirs <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                cur <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">[</span>dirs<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> tree <span class=\"token keyword\">and</span> tree<span class=\"token punctuation\">.</span>is_mine<span class=\"token punctuation\">:</span>\n                    res <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">if</span> srcTree <span class=\"token keyword\">and</span> srcTree<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;=</span> tree<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n                        urgent <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            cur <span class=\"token operator\">=</span> st\n        <span class=\"token comment\"># print('op cnt',st,urgent,res,file=sys.stderr,flush=True)</span>\n        <span class=\"token keyword\">return</span> urgent<span class=\"token punctuation\">,</span>res \n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getTreesByDirection</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cur <span class=\"token operator\">=</span> idx\n        trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">[</span>direction<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># print(f'dirs {idx} {direction} {game.getTreeIdxes(trees)}', file=sys.stderr,flush=True)</span>\n                <span class=\"token keyword\">return</span> trees\n            tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> tree<span class=\"token punctuation\">:</span>\n                trees<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tree\n        <span class=\"token comment\"># print(f'dirs {idx} {direction} {game.getTreeIdxes(trees)}', file=sys.stderr,flush=True)</span>\n        <span class=\"token keyword\">return</span> trees \n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getIdxesByDirection</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cur <span class=\"token operator\">=</span> idx\n        idxes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            cur <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">[</span>direction<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># print(f'dirs {idx} {direction} {game.getTreeIdxes(trees)}', file=sys.stderr,flush=True)</span>\n                <span class=\"token keyword\">return</span> idxes\n            idxes<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(f'dirs {idx} {direction} {game.getTreeIdxes(trees)}', file=sys.stderr,flush=True)</span>\n        <span class=\"token keyword\">return</span> idxes\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getEffectIdxes</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> direction <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> Util<span class=\"token punctuation\">.</span>getIdxesByDirection<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span>direction<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isPossibleEarnEnergy</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n        treeIdxes<span class=\"token operator\">=</span>game<span class=\"token punctuation\">.</span>getTreeIdxes<span class=\"token punctuation\">(</span>trees<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'last earnenery test </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>idx<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>treeIdxes<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span> t <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>size <span class=\"token operator\">>=</span> tree<span class=\"token punctuation\">.</span>size <span class=\"token keyword\">and</span> treeIdxes<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> tree<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span> t <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>size <span class=\"token operator\">>=</span> tree<span class=\"token punctuation\">.</span>size <span class=\"token keyword\">and</span> treeIdxes<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">expectEarnEnergy</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cur <span class=\"token operator\">=</span> idx\n        srcTree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n        energy <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n        <span class=\"token keyword\">for</span> day <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">.</span>day<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            sunDirection <span class=\"token operator\">=</span> day <span class=\"token operator\">%</span> <span class=\"token number\">6</span>\n            oppositeDirection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sunDirection <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>sunDirection<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>oppositeDirection<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            oppositeTrees <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span>getTreesByDirection<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span>oppositeDirection<span class=\"token punctuation\">)</span>\n            canEarn <span class=\"token operator\">=</span> Util<span class=\"token punctuation\">.</span>isPossibleEarnEnergy<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span>oppositeTrees<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> canEarn<span class=\"token punctuation\">:</span>\n                energy <span class=\"token operator\">+=</span> srcTree<span class=\"token punctuation\">.</span>size\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                cur <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">[</span>sunDirection<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                tree <span class=\"token operator\">=</span> game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> tree<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> tree<span class=\"token punctuation\">.</span>is_mine<span class=\"token punctuation\">:</span>\n                        energy <span class=\"token operator\">-=</span> tree<span class=\"token punctuation\">.</span>size\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        energy <span class=\"token operator\">+=</span> tree<span class=\"token punctuation\">.</span>size\n            cur <span class=\"token operator\">=</span> idx\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'earn energy'</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span> energy<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> energy\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getExpectPoint</span><span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'expect point'</span><span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">,</span> game<span class=\"token punctuation\">.</span>nutrients <span class=\"token operator\">+</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>richness<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> game<span class=\"token punctuation\">.</span>nutrients <span class=\"token operator\">+</span> game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>richness\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n            \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BuildManager</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>game<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>game <span class=\"token operator\">=</span> game\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getPossibleSeedActions</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        board <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>board\n        treeIdxes <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>getTreeIdxes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        possibleIdxes <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n            <span class=\"token keyword\">if</span> t<span class=\"token punctuation\">.</span>isTree<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>isActive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n                    idx<span class=\"token punctuation\">,</span>dis <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> nidx <span class=\"token keyword\">in</span> board<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>neighbors<span class=\"token punctuation\">:</span>\n                        <span class=\"token comment\"># size 내에 다 검색하는데 비어있는건 중복이 안되야하지만 트리가 있거나 unusable은 탐색은 해야한다.</span>\n                        <span class=\"token keyword\">if</span>  dis<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> t<span class=\"token punctuation\">.</span>size <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> nidx <span class=\"token keyword\">in</span> visited <span class=\"token keyword\">and</span> Util<span class=\"token punctuation\">.</span>isValidIndex<span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">)</span>\n                            q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">,</span>dis<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">if</span> board<span class=\"token punctuation\">[</span>nidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isUsable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>getTreeByIdx<span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> nidx <span class=\"token keyword\">in</span> possibleIdxes <span class=\"token keyword\">and</span> dis <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                                possibleIdxes<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>nidx<span class=\"token punctuation\">)</span>\n                                actions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Action<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'SEED </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>nidx<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># for action in actions:</span>\n        <span class=\"token comment\">#     print('before validate action', action.origin_idx, action.target_idx, Util.calculateValue(self.game,action),file=sys.stderr, flush=True)</span>\n        validActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> action<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>isValidAction<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Action<span class=\"token punctuation\">.</span>MAX_COST<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> validActions<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># for action in validActions:</span>\n            <span class=\"token comment\">#     print('seed val', action.origin_idx, action.target_idx, Util.calculateValue(self.game,action),file=sys.stderr, flush=True)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>validActions<span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> action<span class=\"token punctuation\">:</span>Util<span class=\"token punctuation\">.</span>calculateValue<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getPossibleGrowActions</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> tree <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            actions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>GROW<span class=\"token punctuation\">,</span>tree<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        validActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> action<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>isValidAction<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Action<span class=\"token punctuation\">.</span>MAX_COST<span class=\"token punctuation\">,</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> validActions<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>validActions<span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> action<span class=\"token punctuation\">:</span>Util<span class=\"token punctuation\">.</span>calculateValue<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getPossibleCompleteActions</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> tree <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>getMyTrees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            actions<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        validActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> action<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>isValidAction<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> Action<span class=\"token punctuation\">.</span>MAX_COST<span class=\"token punctuation\">,</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> validActions<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>validActions<span class=\"token punctuation\">,</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> action<span class=\"token punctuation\">:</span>Util<span class=\"token punctuation\">.</span>calculateValue<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">nextAction</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">>=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">:</span>\n            Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            possibleActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>getPossibleCompleteActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleGrowActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">>=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">:</span>\n            Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n            possibleActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>getPossibleCompleteActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleGrowActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleSeedActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">>=</span> <span class=\"token number\">17</span><span class=\"token punctuation\">:</span>\n            Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            possibleActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>getPossibleCompleteActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleGrowActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleSeedActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">>=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">:</span>\n            Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n            possibleActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>getPossibleCompleteActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleGrowActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleSeedActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">>=</span> <span class=\"token number\">13</span><span class=\"token punctuation\">:</span>\n            Action<span class=\"token punctuation\">.</span>MAX_TREE_CNT <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n            possibleActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>getPossibleCompleteActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleGrowActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleSeedActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            possibleActions <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>getPossibleSeedActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>getPossibleGrowActions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Action<span class=\"token punctuation\">(</span>ActionType<span class=\"token punctuation\">.</span>WAIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print('Debug message..',list(self.getPossibleSeedActions()),file=sys.stderr,flush=True)</span>\n        <span class=\"token comment\"># print('Debug message..',list(self.getPossibleGrowActions()),file=sys.stderr,flush=True)</span>\n        <span class=\"token comment\"># print('Debug message..',list(self.getPossibleCompleteActions()),file=sys.stderr,flush=True)</span>\n        <span class=\"token keyword\">for</span> action <span class=\"token keyword\">in</span> possibleActions<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Debug message..'</span><span class=\"token punctuation\">,</span>action<span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        nextAction <span class=\"token operator\">=</span> possibleActions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> nextAction<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span> <span class=\"token operator\">==</span> ActionType<span class=\"token punctuation\">.</span>COMPLETE<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>game<span class=\"token punctuation\">.</span>harvest <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> nextAction\n        \n    \n                \n    \n            \n            \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>nutrients <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>possible_actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>my_sun <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>my_score <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>opponents_sun <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>opponent_score <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>opponent_is_waiting <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>harvest <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> day <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>harvest <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">compute_next_action</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>possible_actions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getMyTrees</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">.</span>is_mine <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>size <span class=\"token keyword\">in</span> size<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getOpTrees</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>size <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span><span class=\"token keyword\">not</span> t<span class=\"token punctuation\">.</span>is_mine <span class=\"token keyword\">and</span> t<span class=\"token punctuation\">.</span>size <span class=\"token keyword\">in</span> size<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getTreeIdxes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>trees<span class=\"token operator\">=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span> t<span class=\"token punctuation\">.</span>idx <span class=\"token keyword\">if</span> t <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>trees <span class=\"token keyword\">if</span> trees <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">else</span> trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getMyTreeByIdx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">.</span>is_mine <span class=\"token keyword\">and</span> idx <span class=\"token operator\">==</span> t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'should be valid idx'</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getTreeByIdx</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># print('find idx',idx, type(idx),file=sys.stderr,flush=True)</span>\n            <span class=\"token comment\"># for tree in self.trees:</span>\n            <span class=\"token comment\">#     print('trees idx',tree.idx, type(tree.idx),file=sys.stderr,flush=True)</span>\n            <span class=\"token comment\"># print('trees idx result:',list(filter(lambda t: idx == t.idx, self.trees)),file=sys.stderr,flush=True)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> t<span class=\"token punctuation\">:</span> idx <span class=\"token operator\">==</span> t<span class=\"token punctuation\">.</span>idx<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> \n<span class=\"token comment\"># Auto-generated code below aims at helping you parse</span>\n<span class=\"token comment\"># the standard input according to the problem statement.</span>\n\nnumber_of_cells <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 37</span>\ngame <span class=\"token operator\">=</span> Game<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>number_of_cells<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># index: 0 is the center cell, the next cells spiral outwards</span>\n    <span class=\"token comment\"># richness: 0 if the cell is unusable, 1-3 for usable cells</span>\n    <span class=\"token comment\"># neigh_0: the index of the neighbouring cell for each direction</span>\n    index<span class=\"token punctuation\">,</span> richness<span class=\"token punctuation\">,</span> neigh_0<span class=\"token punctuation\">,</span> neigh_1<span class=\"token punctuation\">,</span> neigh_2<span class=\"token punctuation\">,</span> neigh_3<span class=\"token punctuation\">,</span> neigh_4<span class=\"token punctuation\">,</span> neigh_5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    game<span class=\"token punctuation\">.</span>board<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Cell<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>richness<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>neigh_0<span class=\"token punctuation\">,</span>neigh_1<span class=\"token punctuation\">,</span>neigh_2<span class=\"token punctuation\">,</span>neigh_3<span class=\"token punctuation\">,</span>neigh_4<span class=\"token punctuation\">,</span>neigh_5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    \n\n<span class=\"token comment\"># game loop</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    day <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># the game lasts 24 days: 0-23</span>\n    game<span class=\"token punctuation\">.</span>refresh<span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span>\n    game<span class=\"token punctuation\">.</span>day <span class=\"token operator\">=</span> day\n    nutrients <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># the base score you gain from the next COMPLETE action</span>\n    game<span class=\"token punctuation\">.</span>nutrients <span class=\"token operator\">=</span> nutrients\n    <span class=\"token comment\"># sun: your sun points</span>\n    <span class=\"token comment\"># score: your current score</span>\n    sun<span class=\"token punctuation\">,</span> score <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    game<span class=\"token punctuation\">.</span>my_sun<span class=\"token punctuation\">,</span> game<span class=\"token punctuation\">.</span>my_score <span class=\"token operator\">=</span> sun<span class=\"token punctuation\">,</span>score\n    inputs <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    opp_sun <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># opponent's sun points</span>\n    opp_score <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># opponent's score</span>\n    opp_is_waiting <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"0\"</span>  <span class=\"token comment\"># whether your opponent is asleep until the next day</span>\n    game<span class=\"token punctuation\">.</span>opponents_sun <span class=\"token operator\">=</span> opp_sun\n    game<span class=\"token punctuation\">.</span>opponent_score <span class=\"token operator\">=</span> opp_score\n    game<span class=\"token punctuation\">.</span>opponent_is_waiting <span class=\"token operator\">=</span> opp_is_waiting\n    number_of_trees <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># the current amount of trees</span>\n    game<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>number_of_trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        inputs <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cell_index <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># location of this tree</span>\n        size <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># size of this tree: 0-3</span>\n        is_mine <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"0\"</span>  <span class=\"token comment\"># 1 if this is your tree</span>\n        is_dormant <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"0\"</span>  <span class=\"token comment\"># 1 if this tree is dormant</span>\n        game<span class=\"token punctuation\">.</span>trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>Tree<span class=\"token punctuation\">(</span>cell_index<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> is_mine<span class=\"token punctuation\">,</span> is_dormant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># print(f'Debug message...{cell_index},{size},{is_mine},{is_dormant}',file=sys.stderr,flush=True)</span>\n    number_of_possible_moves <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    game<span class=\"token punctuation\">.</span>possible_actions<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>number_of_possible_moves<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        possible_move <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># action = Action.parse(possible_move)</span>\n        <span class=\"token comment\"># richness = 0 if action.target_idx is None else game.board[action.target_idx].richness</span>\n        <span class=\"token comment\"># game.possible_actions.append((richness,action))</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'game info\\n'</span><span class=\"token punctuation\">,</span><span class=\"token string-interpolation\"><span class=\"token string\">f'my_sun:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>game<span class=\"token punctuation\">.</span>my_sun<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\nnutrients:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>game<span class=\"token punctuation\">.</span>nutrients<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span><span class=\"token builtin\">file</span><span class=\"token operator\">=</span>sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">,</span>flush<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    buildManager <span class=\"token operator\">=</span> BuildManager<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># game.possible_actions.sort(reverse=True)</span>\n      \n\n    <span class=\"token comment\"># Write an action using print</span>\n    <span class=\"token comment\"># To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>buildManager<span class=\"token punctuation\">.</span>nextAction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"coding-game","date":"May 16, 2021","description":"algorithm"}},"previous":{"fields":{"slug":"/books/cleancode/6장/"},"frontmatter":{"title":"[cleancode]6장 객체와 자료구조"}},"next":null},"pageContext":{"id":"ee531632-8a74-5a34-83bf-7e77fa5e91d7","previousPostId":"7eb63ab0-af11-52f0-b34d-2609506c2052","nextPostId":null}},"staticQueryHashes":["2841359383"]}