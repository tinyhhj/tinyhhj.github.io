{"componentChunkName":"component---src-templates-blog-post-js","path":"/algo/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"1499e50d-a74a-5264-be3d-bead76c58895","excerpt":"완전탐색 재귀호출 1~n의 합을 구할때 작은 조각으로 나눠 문제해결 n만 따로 빼냄: 1~n-1 조각(재귀)와 n 조각을 연산 1만 따로 빼냄: 2~n 조각은 애초에 1~n까지의 합을 구한다는 원래의 문제와 다른 형태이므로 재귀로 사용 x…","html":"<h1>완전탐색</h1>\n<h2>재귀호출</h2>\n<p>1~n의 합을 구할때 작은 조각으로 나눠 문제해결</p>\n<ol>\n<li>n만 따로 빼냄: 1~n-1 조각(재귀)와 n 조각을 연산</li>\n<li>1만 따로 빼냄: 2~n 조각은 애초에 1~n까지의 합을 구한다는 원래의 문제와 다른 형태이므로 재귀로 사용 x\n<strong>기저사례</strong>: 더이상 쪼개지지 않는 최소한의 작업 (존재하는 모든 입력이 항상 <strong>기저사례</strong>의 답을 이용할 수 있어야한다.)</li>\n</ol>\n<p><a href=\"https://algospot.com/judge/problem/read/BOGGLE\">BOGGLE</a></p>\n<h2>전</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import java.io.*;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;test.txt&quot;)));\n        String testcase = br.readLine();\n\n        for( int i =0 ; i &lt; Integer.valueOf(testcase) ; i++) {\n            char[][] arr = new char[5][5];\n            for( int j =0 ; j &lt; 5 ; j++) {\n                arr[j] = br.readLine().toCharArray();\n            }\n            int num = Integer.valueOf(br.readLine());\n            for( int k = 0 ; k &lt; num; k++) {\n                char[] word = br.readLine().toCharArray();\n                boolean find = false;\n                int y = -1, x = 0;\n                for(int z = 0 ; z &lt; 25; z++) {\n                    if( z % 5 == 0) {\n                        y++;\n                        x=0;\n                    } else {\n                        x++;\n                    }\n                    if( findWord(arr, y,x,word)) {\n                        System.out.println(new String(word)+ &quot; &quot; + &quot;YES&quot;);\n                        find = true;\n                        break;\n                    }\n                }\n                if( !find) {\n                    System.out.println(new String(word)+ &quot; &quot; + &quot;NO&quot;);\n                }\n\n            }\n        }\n\n    }\n\n    private static boolean findWord(char[][] arr, int y, int x , char[] word) {\n        if( word.length == 1) {\n            if( arr[y][x] == word[0]) return true;\n            else return false;\n        }\n        if( arr[y][x] == word[0]) {\n            int yy = y-2, xx = x-1;\n            for( int kk =0 ; kk &lt; 9 ; kk++) {\n                if( kk % 3 == 0) {\n                    yy++;\n                    xx = x-1;\n                } else {\n                    xx++;\n                }\n                if( kk == 4) continue;\n                if( yy &gt;=0 &amp;&amp; yy&lt;5&amp;&amp;xx &gt;=0 &amp;&amp; xx&lt;5) {\n                    if( findWord(arr,yy,xx,new String(word).substring(1).toCharArray())) {\n                        return true;\n                    }\n                }\n            }\n\n        }\n        return false;\n    }\n}</code></pre></div>","frontmatter":{"title":"Algo","date":"December 26, 2019","description":"links"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algo/","previous":{"fields":{"slug":"/spring5/"},"frontmatter":{"title":"Spring Chap. 5"}},"next":{"fields":{"slug":"/spring1/"},"frontmatter":{"title":"Spring Chap. 1"}}}}}