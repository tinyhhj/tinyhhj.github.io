{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring4/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"tinyhhj Blog"}},"markdownRemark":{"id":"26d377ea-3799-566c-a520-b35cb4ea37e9","excerpt":"예외 예외의 핵심원칙 모든 예외는 적절하게 복구되던지, 작업을 중단하고 운영자 혹은 개발자에게 통보되야 한다. 예외 종류 체크예외: RuntimeException을 상속받지 않는 Exception 언체크예외: RuntimeException을 상속받은 Exception…","html":"<h2>예외</h2>\n<h3>예외의 핵심원칙</h3>\n<p>모든 예외는 적절하게 복구되던지, 작업을 중단하고 운영자 혹은 개발자에게 통보되야 한다.</p>\n<h3>예외 종류</h3>\n<ol>\n<li>체크예외: RuntimeException을 상속받지 않는 Exception</li>\n<li>언체크예외: RuntimeException을 상속받은 Exception</li>\n</ol>\n<h3>예외 처리방법</h3>\n<ol>\n<li>복구 - 예외상황을 알맞게 처리한다.</li>\n<li>회피 - 예외를 처리하지 않고 호출한 메소드로 예외를 던진다.</li>\n<li>전환 - 예외 상황을 명확하게 표현할 수 있는 예외형식으로 전환하거나, 체크 예외를 언체크 예외로 변경하는(의미없는 try catch구문 남발 방지) 경우 전환하여 예외를 던진다.</li>\n</ol>\n<h3>예외처리 전략</h3>\n<p>일반적으로 체크예외는 일반적인 예외, 언체크 예외는 시스템 장애나 프로그램상 오류이다.\n초기의 자바가 독립형 앱을 구성할 때에는 작업이 중단되지 않게 상황을 복구 시켜줘야만 했다. (예: 파일 열기 시 파일을 찾을 수 없는경우)\n그러나 서버환경에서는 각 요청이 독립적인 작업으로 취급되므로, 예외 발생 시 작업을 중지하고 사용자와 소통하여 복구할 수 있는 방법이 없다.</p>\n<p>스프링은 DataAccessException을 통해서 DB에 독립적으로 적용 가능한 추상화된 런타임 예외 계층을 제공한다. Dao를 데이터 액세스 기술에서 독립 시키려면 인터페이스 도입과 런타임 예외 전환(jdbcTemplate), 기술에 독립적인 추상화된 예외로 전환이 필요하다.</p>","frontmatter":{"title":"Spring Chap. 4","date":"December 20, 2019","description":"Toby Spring"}}},"pageContext":{"slug":"/spring4/","previous":{"fields":{"slug":"/spring3/"},"frontmatter":{"title":"Spring Chap. 3"}},"next":{"fields":{"slug":"/links/"},"frontmatter":{"title":"Links"}}}}}