{"componentChunkName":"component---src-templates-blog-post-js","path":"/deep-learning/derivatives/derivatives/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"530231bd-64ee-5f33-b056-2322d33aef72","excerpt":"미분 미분을 할때 어렵게 느껴지는 이유는 많은 것을, 한번에 해결하려고 하기 때문입니다. 또한 많은 실수를 야기합니다.\n그래서 다차원 미분을 할때에, 단순한 수식부터 확장해 나가는것이 좋습니다. 벡터미분 $\\overrightharpoon{y} = W\\overrightharpoon{x…","html":"<h2>미분</h2>\n<p>미분을 할때 어렵게 느껴지는 이유는 많은 것을, 한번에 해결하려고 하기 때문입니다. 또한 많은 실수를 야기합니다.\n그래서 다차원 미분을 할때에, 단순한 수식부터 확장해 나가는것이 좋습니다.</p>\n<h3>벡터미분</h3>\n<p>$\\overrightharpoon{y} = W\\overrightharpoon{x}$의 벡터 미분일고 각 벡터의 크기는 y(A,1),W(A,B),x(B,1) 일때,</p>\n<ol>\n<li>스칼라 결과값을 갖는 수식을 작성해봅니다.<br>\n$\\frac{\\partial \\overrightharpoon{y<em>3}}{\\partial \\overrightharpoon{x</em>7}}$<br>\n$\\sum\\limits<em>{j=1}^D W</em>{\\3<em>j}\\overrightharpoon{x</em>j}$<br>\n벡터 수식에서 훨씬 단순한 스칼라 결과값을 갖는 수식으로 변경했습니다.</li>\n<li>요약 기호들을 삭제합니다.($\\sum$, $\\prod$)\n미분을 할 때, 수식을 줄여주는 기호들로 인해 실수를 하는 경우가 많습니다. 만약 미분에 익숙하지 않은 경우에 수식을 풀어서 표시하는게 좋습니다.<br>\n$\\overrightharpoon{y} = {W<em>31}\\overrightharpoon{x</em>1} + {W<em>32}\\overrightharpoon{x</em>2} + … + {W<em>37}\\overrightharpoon{x</em>7} + … + {W<em>3D}\\overrightharpoon{x</em>D}$</li>\n<li>미분을 합니다.\n위 수식을 $\\overrightharpoon{x<em>7}$으로 미분할 경우, \\frac{\\partial \\overrightharpoon{y</em>3}}{\\partial \\overrightharpoon{x<em>7}} = ${W</em>37}$</li>\n<li>즉 미분결과는 W가 됨을 알 수 있습니다.</li>\n</ol>\n<h3>벡터를 행렬로 미분</h3>\n<p>벡터의 각 차원을 행렬을 순회하면서 미분값을 구해야 하므로 3중 for문을 도는것과 같이 자연스럽게 결과는 3차원 벡터라고 생각할 수 있습니다.</p>\n<ol>\n<li>스칼라 결과값을 갖는 수식을 작성합니다.\ny3 = x<em>W78 = x1</em>W13 + x2<em>W23 + … + xD</em>WD3<br>\n즉, W78은 y3에 관여를 안하므로 0이 됩니다. 행렬 곱셈을 생각해봤을 때, y의 index와 W의 열 index가 같을경우에만 미분값이 존재한다는 것을 알 수 있습니다.\n그럼 y3을 Wi3으로 미분값을 구하면 y3 = x1<em>W13 + x2</em>W23 + .. + xD*WD3이 되므로 xi가 됩니다.<br>\n즉 Fijk = dyi/dWjk = dyi/dWji = xj가 됨을 확인 할 수 있습니다. 즉 y차원별 하나의 열벡터만이 미분 값을 가지므로, 2차원으로 압축해서\nGij = Fiji로 표현할 수 있습니다.</li>\n</ol>\n<h3>행렬을 행렬로 미분</h3>\n<p>입력이 배치인경우에<br>\nY = X*W로 표현이 가능합니다.</p>\n<ol>\n<li>스칼라 결과값을 갖는 수식을 작성합니다.\nY13에 영향을 줄 수 있는 입력값은 X1k*Wk3입니다.</li>\n<li>수식을 풀어서 적습니다.\nY13 = X1k<em>Wk3 = X11</em>W13 + X12<em>W23 + .. X1M</em>WM3</li>\n<li>Y의 row index는 X의 row index와 같고 column index는 W의 column index와 같으므로, dYij/dXik = Wkj 와 같습니다.</li>\n<li>3번 식을 general하게 풀어보면 Yi:를 i행이라고할 때, dYi:/dXi: = W라는 식을 얻을 수 있습니다.</li>\n</ol>\n<h3>합성함수의 미분</h3>\n<ol>\n<li>합성함수의 경우 각 연산의 미분의 곱과 같습니다.</li>\n<li>y = VWx라고 할 경우 VW = U를 이용하여 dy/dx = U를 쉽게 구할 수 있습니다.</li>\n<li>합성함수의 연쇄법칙으로 구해보면 Wx = m, y = Vm 처럼 중간 값 m을 이용하여 dy/dm * dm/dx로 dy/dx를 구할 수 있습니다.</li>\n<li>dy/dx를 스칼라값으로 수식을 단순하게 작성해보면 dyi/dm * dm/dxj = dyi/dxj, 여기서 dxj(어떤 j라도)가 변할경우 m벡터 전체에 영향을 전파합니다.<br>\nmi = Wix1 + Wix2 + .. Wi+xn 이므로</li>\n<li>즉 모든 m의 차원에 대해서 미분 값을 더해야하기때문에 k=1~M dyi/dmk * dmk/dxj 를 구해야합니다.</li>\n<li>dyi/dmk = Vik이고 dmk/dxj = Wkj이기 때문에 k=1~M Vik * Wkj 즉 VW=U가 미분값이 됩니다. </li>\n</ol>\n<h3>Reference</h3>\n<ol>\n<li><a href=\"http://cs231n.stanford.edu/vecDerivs.pdf\">Derivatives</a></li>\n</ol>","frontmatter":{"title":"[deeplearning]derivatives","date":"February 06, 2020","description":"deep-learning"}}},"pageContext":{"slug":"/deep-learning/derivatives/derivatives/","previous":{"fields":{"slug":"/deep-learning-from-scratch/index1/"},"frontmatter":{"title":"[python]deep-learning-1"}},"next":{"fields":{"slug":"/python/star-args/"},"frontmatter":{"title":"[python]star argument"}}}}}