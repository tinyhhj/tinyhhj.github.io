{"componentChunkName":"component---src-templates-blog-post-js","path":"/deep-learning/blank-review/image-recovery/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"fa97558b-5604-585e-a5dc-5c7a8be77965","excerpt":"Image-recovery 이 내용은 펭귄브로의 3분 딥러닝, 파이토치맛의 3장 내용을 복습한 예제입니다. 문제 weired_function을 통해 나온 손상된 이미지를 원래대로 복구할 수 있는 방법? 일반적 접근 weired_function 원리 이해 weired_function…","html":"<h2>Image-recovery</h2>\n<p>이 내용은 <a href=\"http://www.hanbit.co.kr/store/books/look.php?p_code=B7193109877\">펭귄브로의 3분 딥러닝, 파이토치맛</a>의 3장 내용을 복습한 예제입니다.</p>\n<h3>문제</h3>\n<p>weired_function을 통해 나온 손상된 이미지를 원래대로 복구할 수 있는 방법?</p>\n<ol>\n<li>\n<p>일반적 접근</p>\n<ol>\n<li>weired_function 원리 이해</li>\n<li>weired_function를 복구할 수 있는 함수 작성</li>\n<li>이미지 복구</li>\n</ol>\n</li>\n<li>\n<p>머신러닝 접근</p>\n<ol>\n<li>손상된 이미지와 같은 사이즈의 랜덤 이미지를 weired_function에 입력</li>\n<li>1.의 출력된 결과와 손상된 이미지 차이 비교 </li>\n<li>손상된 이미지와 같게끔 랜덤 이미지 입력값 조정 </li>\n<li>최종적으로 손상된 이미지가 나온 랜덤 이미지를 찾았다면 이미지 복구</li>\n</ol>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import torch\nimport pickle\nimport matplotlib.pyplot as plt\n\ndef weird_function(x, n_iter=5):\n    h = x\n    filt = torch.tensor([-1./3, 1./3, -1./3])\n    for ii in range(n_iter):\n        zero_tensor = torch.tensor([1.0*0])\n        h_l = torch.cat( (zero_tensor, h[:-1]), 0)\n        h_r = torch.cat((h[1:], zero_tensor), 0 )\n        h = filt[0] * h + filt[2] * h_l + filt[1] * h_r\n        if ii % 2 == 0:\n            h = torch.cat( (h[h.shape[0]//2:],h[:h.shape[0]//2]), 0  )\n    return h\n\n# image load\nbroken_image = torch.FloatTensor(pickle.load(open(&#39;./broken_image_t.p&#39;,&#39;rb&#39;),encoding=&#39;latin1&#39;))\n# image show\nplt.imshow(broken_image.view(100,-1))\nplt.show()\n\nrandom_image = torch.randn(10000,requires_grad=True)\nlearning_rate = 0.8\nprint(&#39;learning rate: {}&#39;.format(learning_rate))\nfor i in range(20000):\n    # auto grad를 아직 잘 이해못한듯..\n\n    random_image.requires_grad_(True)\n    # process weired\n    result_image = weird_function(random_image)\n    # calc loss\n    loss = torch.dist(result_image,broken_image,2)\n    loss.backward()\n    # rearrange random image\n    with torch.no_grad():\n        random_image = random_image - learning_rate * random_image.grad\n\n    if(i % 1000 == 0):\n        print(&#39;loss: {}&#39;.format(loss))\nplt.imshow(random_image.view(100,-1))\nplt.show()</code></pre></div>","frontmatter":{"title":"[deeplearning]image-recovery","date":"February 16, 2020","description":"deep-learning"}}},"pageContext":{"slug":"/deep-learning/blank-review/image-recovery/","previous":{"fields":{"slug":"/python/star-args/"},"frontmatter":{"title":"[python]star argument"}},"next":{"fields":{"slug":"/deep-learning-from-scratch/index4/"},"frontmatter":{"title":""}}}}}