{"componentChunkName":"component---src-templates-blog-post-js","path":"/deep-learning/blank-review/simple-classifier/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"tinyhhj Blog"}},"markdownRemark":{"id":"3b86b2ec-987e-58ae-b460-4b5ee1e54254","excerpt":"Simple-classifier 문제 fashion mnist 구분하기 reference 펭귄브로의 3분 딥러닝, 파이토치맛","html":"<h2>Simple-classifier</h2>\n<h3>문제</h3>\n<ol>\n<li>fashion mnist 구분하기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> torchvision\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn <span class=\"token keyword\">as</span> nn\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>optim <span class=\"token keyword\">as</span> optim\n<span class=\"token keyword\">import</span> torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional <span class=\"token keyword\">as</span> F\n<span class=\"token keyword\">from</span> torchvision <span class=\"token keyword\">import</span> transforms<span class=\"token punctuation\">,</span> datasets\n<span class=\"token keyword\">import</span> math\n\n\ntrain <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>FashionMNIST<span class=\"token punctuation\">(</span><span class=\"token string\">'fashion_mnist'</span><span class=\"token punctuation\">,</span>transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    transforms<span class=\"token punctuation\">.</span>RandomHorizontalFlip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ntrain2 <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>FashionMNIST<span class=\"token punctuation\">(</span><span class=\"token string\">'fashion_mnist'</span><span class=\"token punctuation\">,</span>transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> datasets<span class=\"token punctuation\">.</span>FashionMNIST<span class=\"token punctuation\">(</span><span class=\"token string\">'fashion_mnist'</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\nbs <span class=\"token operator\">=</span> <span class=\"token number\">64</span>\ntrain_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">,</span>\n                            batch_size<span class=\"token operator\">=</span>bs<span class=\"token punctuation\">,</span>\n                            <span class=\"token punctuation\">)</span>\ntrain2_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>train2<span class=\"token punctuation\">,</span>batch_size<span class=\"token operator\">=</span>bs<span class=\"token punctuation\">)</span>\n\ntest_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span>bs<span class=\"token punctuation\">,</span> shuffle <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\ndataiter <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span>\nimages<span class=\"token punctuation\">,</span> labels <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>dataiter<span class=\"token punctuation\">)</span>\n\ndataiter2 <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>train2_loader<span class=\"token punctuation\">)</span>\nimages2<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>dataiter2<span class=\"token punctuation\">)</span>\nimages2 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>images2<span class=\"token punctuation\">,</span>images2<span class=\"token punctuation\">,</span>images2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\nimg <span class=\"token operator\">=</span> torchvision<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>make_grid<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span> padding <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nrow <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>images2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    row<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>images2<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">:</span>r<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nimg2 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\nnpimg <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnpimg2 <span class=\"token operator\">=</span> img2<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>npimg<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> npimg2<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>npimg<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span>npimg2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># plt.show()</span>\n\n<span class=\"token comment\"># exit()</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Net</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>dropout_p <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Net<span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>net <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Sequential<span class=\"token punctuation\">(</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">28</span><span class=\"token operator\">*</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>dropout_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>ReLU<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>dropout_p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> images<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        images <span class=\"token operator\">=</span> images<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">784</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">)</span>\n\ndevice <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">)</span>\n\nepochs <span class=\"token operator\">=</span> <span class=\"token number\">50</span>\nsize <span class=\"token operator\">=</span> <span class=\"token number\">64</span>\n\nnet <span class=\"token operator\">=</span> Net<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">,</span> optimizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> images<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n        loss <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>cross_entropy<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    model<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    test_loss <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    correct <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> data<span class=\"token punctuation\">,</span> target <span class=\"token keyword\">in</span> loader<span class=\"token punctuation\">:</span>\n            data<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n            pred <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># print('input:{},output:{}'.format(data.size(), pred.size()))</span>\n            loss <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span>cross_entropy<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            test_loss <span class=\"token operator\">+=</span> loss\n            pred <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>keepdim<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n            correct <span class=\"token operator\">+=</span> pred<span class=\"token punctuation\">.</span>eq<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>view_as<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># print('pred:{},target:{}'.format(pred.size(),target.view_as(pred).size()))</span>\n        test_loss <span class=\"token operator\">/=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span>\n        test_accuracy <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span> correct <span class=\"token operator\">/</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> test_loss<span class=\"token punctuation\">,</span> test_accuracy\n\n\n<span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    train<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span>train_loader<span class=\"token punctuation\">,</span>optimizer<span class=\"token punctuation\">)</span>\n    test_loss<span class=\"token punctuation\">,</span> test_accuracy <span class=\"token operator\">=</span> evaluate<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> test_loader<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test loss:{} , test_accuracy:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>test_loss<span class=\"token punctuation\">,</span> test_accuracy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>reference</h3>\n<ul>\n<li><a href=\"http://www.hanbit.co.kr/store/books/look.php?p_code=B7193109877\">펭귄브로의 3분 딥러닝, 파이토치맛</a></li>\n</ul>","frontmatter":{"title":"[deeplearning]simple-classifier","date":"February 23, 2020","description":"deep-learning"}}},"pageContext":{"slug":"/deep-learning/blank-review/simple-classifier/","previous":{"fields":{"slug":"/deep-learning/blank-review/simple-ann/"},"frontmatter":{"title":"[deeplearning]simple-ann"}},"next":{"fields":{"slug":"/deep-learning/batchnorm/"},"frontmatter":{"title":"[deeplearning]batchnorm"}}}}}