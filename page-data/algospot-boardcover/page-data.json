{"componentChunkName":"component---src-templates-blog-post-js","path":"/algospot-boardcover/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"aa9963bb-fde2-53cf-bfaa-e429009871f3","excerpt":"BOARDCOVER 재귀호출","html":"<h1><a href=\"https://algospot.com/judge/problem/read/BOARDCOVER\">BOARDCOVER</a></h1>\n<h2>재귀호출</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public class Main {\n\n    private static char[][][] block = new char[][][] {\n            {{&#39;#&#39;,&#39;#&#39;},\n                    {&#39;#&#39;,&#39;.&#39;}},\n            {{&#39;#&#39;,&#39;#&#39;},\n                    {&#39;.&#39;,&#39;#&#39;}},\n            {{&#39;.&#39;,&#39;#&#39;},\n                    {&#39;#&#39;,&#39;#&#39;}},\n            {{&#39;#&#39;,&#39;.&#39;},\n                    {&#39;#&#39;,&#39;#&#39;}},\n    };\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner sc = new Scanner(new FileInputStream(&quot;algospot/boardcover/input.txt&quot;));\n        int tc = sc.nextInt();\n        IntStream.range(0,tc)\n                .forEach(i-&gt; {\n                    //tc\n                    int row = sc.nextInt();\n                    int col = sc.nextInt();\n                    sc.nextLine();\n\n                    char[][] map = new char[row][];\n\n                    // map reading\n                    final int[] sum = {0};\n                    IntStream.range(0,row)\n                            .forEach(ii-&gt;{\n                                map[ii] = sc.nextLine().toCharArray();\n                                sum[0] += IntStream.range(0,map[ii].length)\n                                        .mapToObj(index-&gt;map[ii][index])\n                                        .filter(c-&gt;c==&#39;.&#39;)\n                                        .count();\n                            });\n                    System.out.println(getBlockNum(map,sum[0]));\n\n                });\n    }\n\n    // input: map, 남은 칸수\n    // output: block을 놓을 수 있는 가능한 수\n    public static int getBlockNum(final char[][] map, int remain) {\n        if( remain % 3 != 0)\n            return 0;\n        if( remain == 0 )\n            return 1;\n\n        // 맨 왼쪽 위쪽부터 블록을 채워감\n        int first = IntStream.range(0,map.length * map[0].length)\n                .filter(i-&gt;map[i/map[0].length][i%map[0].length] == &#39;.&#39;)\n                .findFirst().getAsInt();\n        int r = first / map[0].length;\n        int c = first % map[0].length;\n        int res= 0 ;\n\n        for( int i = 0; i &lt; 4 ; i++) {\n            char[][] b = block[i];\n            if( isBlockFit(map, b, r, c)) {\n                addBlock(map,b,r,c);\n                res += getBlockNum(map, remain-3);\n                removeBlock(map,b,r,c);\n            }\n        }\n        return res;\n    }\n\n    private static void removeBlock(char[][] map, char[][] b, int r, int c) {\n        if(b[0][0] == &#39;.&#39;) c--;\n        for( int i = 0; i &lt; 2 ; i++) {\n            for( int j = 0 ; j &lt; 2 ; j++) {\n                if( b[i][j] == &#39;#&#39;) {\n                    map[r+i][c+j] = &#39;.&#39;;\n                }\n            }\n        }\n    }\n\n    private static void addBlock(char[][] map, char[][] b, int r, int c) {\n        if(b[0][0] == &#39;.&#39;) c--;\n        for( int i = 0; i &lt; 2 ; i++) {\n            for( int j = 0 ; j &lt; 2 ; j++) {\n                if( b[i][j] == &#39;#&#39;) {\n                    map[r+i][c+j] = &#39;#&#39;;\n                }\n            }\n        }\n    }\n\n    private static boolean isBlockFit(char[][] map, char[][] b, int r, int c) {\n        if(b[0][0] == &#39;.&#39;) c--;\n        if(!(r &gt;= 0 &amp;&amp; r &lt; map.length &amp;&amp; c &gt;=0 &amp;&amp; c &lt; map[0].length\n        &amp;&amp; r+1 &gt;= 0 &amp;&amp; r+1 &lt; map.length &amp;&amp; c+1&gt;=0 &amp;&amp; c+1 &lt; map[0].length)) return false;\n        for( int i = 0; i &lt; 2 ; i++) {\n            for( int j = 0 ; j &lt; 2 ; j++) {\n                if( map[r+i][c+j] == &#39;#&#39; &amp;&amp; b[i][j] == &#39;#&#39;) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}</code></pre></div>","frontmatter":{"title":"[algospot]boardcover","date":"January 04, 2020","description":"algorithm"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/algospot-boardcover/","previous":{"fields":{"slug":"/spring6/"},"frontmatter":{"title":"Spring Chap. 6"}},"next":{"fields":{"slug":"/algospot-tsp1/"},"frontmatter":{"title":"[algospot]tsp1"}}}}}